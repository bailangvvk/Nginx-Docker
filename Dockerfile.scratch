# 第一阶段：构建环境，编译所有依赖和 Nginx
# 使用一个明确的版本号，有助于构建的可复现性
FROM alpine:3.20 AS builder

# 安装编译所有组件所需的依赖
# build-base 包含了 gcc, make 等基础工具
RUN apk add --no-cache \
    build-base \
    wget \
    perl \
    linux-headers

# 定义所有组件的版本，方便统一管理和更新
# 移除了旧的 PCRE_VERSION，专注于使用 PCRE2
ARG NGINX_VERSION=1.26.1
ARG OPENSSL_VERSION=3.3.1
ARG ZLIB_VERSION=1.3.1
ARG PCRE2_VERSION=10.44

# 设置工作目录
WORKDIR /usr/src

# 1. 编译 zlib (静态库)
RUN wget --no-check-certificate http://zlib.net/zlib-${ZLIB_VERSION}.tar.gz && \
    tar -zxvf zlib-${ZLIB_VERSION}.tar.gz
WORKDIR /usr/src/zlib-${ZLIB_VERSION}
# --static 告诉 configure 我们只想要静态库
RUN ./configure --static && make

# 2. 编译 PCRE2 (静态库)
WORKDIR /usr/src
RUN wget --no-check-certificate https://github.com/PCRE2Project/pcre2/releases/download/pcre2-${PCRE2_VERSION}/pcre2-${PCRE2_VERSION}.tar.gz && \
    tar -zxf pcre2-${PCRE2_VERSION}.tar.gz
WORKDIR /usr/src/pcre2-${PCRE2_VERSION}
# --disable-shared --enable-static 是编译静态库的标准姿势
RUN ./configure --disable-shared --enable-static && make

# 3. 编译 OpenSSL (静态库)
WORKDIR /usr/src
RUN wget --no-check-certificate https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz && \
    tar -zxvf openssl-${OPENSSL_VERSION}.tar.gz
WORKDIR /usr/src/openssl-${OPENSSL_VERSION}
# no-shared 选项告诉 OpenSSL 不要编译动态库
RUN ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl no-shared no-threads && make && make install_sw

# 4. 编译 Nginx 并静态链接所有依赖
WORKDIR /usr/src
RUN wget --no-check-certificate http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && \
    tar -zxvf nginx-${NGINX_VERSION}.tar.gz
WORKDIR /usr/src/nginx-${NGINX_VERSION}
# 关键步骤：通过 --with-ld-opt="-static" 启用完全静态链接
# 并通过 --with-xxx= 指向我们刚刚编译好的依赖的源码目录
# 优化：将日志输出到标准输出/错误，这是容器化最佳实践
RUN ./configure \
        --prefix=/etc/nginx \
        --sbin-path=/usr/sbin/nginx \
        --conf-path=/etc/nginx/nginx.conf \
        --pid-path=/var/run/nginx.pid \
        --lock-path=/var/run/nginx.lock \
        --error-log-path=stderr \
        --http-log-path=stdout \
        --user=nginx \
        --group=nginx \
        --with-http_ssl_module \
        --with-http_v2_module \
        --with-stream \
        --with-stream_ssl_module \
        --with-pcre-jit \
        --with-zlib=/usr/src/zlib-${ZLIB_VERSION} \
        --with-pcre=/usr/src/pcre2-${PCRE2_VERSION} \
        --with-openssl=/usr/src/openssl-${OPENSSL_VERSION} \
        --with-cc-opt="-O2" \
        --with-ld-opt="-static" && \
    make

# 5. 准备最终镜像所需的文件和目录
# 在 builder 阶段创建好所有文件和目录，并设置好权限
# 这样 COPY 到 scratch 镜像时就能保留正确的用户和权限
RUN make install --prefix=/tmp/nginx-install

# 创建非特权用户和组的文件
# 这是在 scratch 镜像中设置用户的标准方法
RUN echo "nginx:x:101:101:nginx:/var/cache/nginx:/sbin/nologin" > /tmp/nginx-install/etc/passwd && \
    echo "nginx:x:101:" > /tmp/nginx-install/etc/group

# 创建 Nginx 运行时所需的缓存和 PID 目录
RUN mkdir -p /tmp/nginx-install/var/cache/nginx && \
    mkdir -p /tmp/nginx-install/var/run && \
    # 关键：将目录所有权交给 nginx 用户，这样工作进程才有权限写入
    chown -R 101:101 /tmp/nginx-install/var/cache/nginx && \
    chown -R 101:101 /tmp/nginx-install/var/run

# 优化 nginx.conf，使其在容器环境中更友好
RUN echo "daemon off;" >> /tmp/nginx-install/etc/nginx/nginx.conf && \
    # 确保 worker_processes 设置为 auto
    sed -i 's/worker_processes  1;/worker_processes  auto;/' /tmp/nginx-install/etc/nginx/nginx.conf


# 第二阶段：最终镜像 (基于 scratch)
FROM scratch

# 复制在构建器中准备好的所有文件
# COPY 会保留文件的元数据，包括权限和所有权 (UID/GID)
COPY --from=builder /tmp/nginx-install/ /

# 切换到非特权用户
# 因为我们复制了 /etc/passwd 和 /etc/group，所以系统知道 nginx 对应的 UID/GID
USER nginx

# 暴露端口
EXPOSE 80 443

# 设置健康检查 (可选，但推荐)
# Nginx 启动需要一点时间，这里设置了启动延迟
HEALTHCHECK --interval=5s --timeout=3s --start-period=10s \
  CMD ["/usr/sbin/nginx", "-t"]

# 启动 Nginx
# 使用 exec 格式的 CMD，这是最佳实践
CMD ["/usr/sbin/nginx"]
