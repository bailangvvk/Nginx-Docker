# =================================================================
#  第一阶段：构建环境 (Builder)
#  使用 Alpine 作为基础，并从源码静态编译所有依赖
# =================================================================
FROM alpine:3.20 AS builder

# 安装编译所有组件所需的依赖
RUN apk add --no-cache \
    build-base \
    wget \
    perl \
    linux-headers

# 定义所有组件的版本
ARG NGINX_VERSION=1.26.1
ARG OPENSSL_VERSION=3.3.1
ARG ZLIB_VERSION=1.3.1
ARG PCRE2_VERSION=10.44

# 设置工作目录
WORKDIR /usr/src

# --- 编译所有依赖 (zlib, pcre2, openssl)，确保它们是静态库 ---
RUN wget --no-check-certificate http://zlib.net/zlib-${ZLIB_VERSION}.tar.gz && tar -zxvf zlib-${ZLIB_VERSION}.tar.gz && cd zlib-${ZLIB_VERSION} && ./configure --static && make
WORKDIR /usr/src
RUN wget --no-check-certificate https://github.com/PCRE2Project/pcre2/releases/download/pcre2-${PCRE2_VERSION}/pcre2-${PCRE2_VERSION}.tar.gz && tar -zxf pcre2-${PCRE2_VERSION}.tar.gz && cd pcre2-${PCRE2_VERSION} && ./configure --disable-shared --enable-static && make
WORKDIR /usr/src
RUN wget --no-check-certificate https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz && tar -zxvf openssl-${OPENSSL_VERSION}.tar.gz && cd openssl-${OPENSSL_VERSION} && ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl no-shared no-threads && make && make install_sw

# --- 编译 Nginx，并将其完全静态链接 ---
WORKDIR /usr/src
RUN wget --no-check-certificate http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && \
    tar -zxvf nginx-${NGINX_VERSION}.tar.gz
WORKDIR /usr/src/nginx-${NGINX_VERSION}
RUN ./configure \
        --prefix=/etc/nginx \
        --sbin-path=/usr/sbin/nginx \
        --conf-path=/etc/nginx/nginx.conf \
        --pid-path=/var/run/nginx.pid \
        --lock-path=/var/run/nginx.lock \
        --user=nginx \
        --group=nginx \
        --http-client-body-temp-path=/var/cache/nginx/client_temp \
        --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
        --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
        --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
        --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
        --with-http_ssl_module \
        --with-http_v2_module \
        --with-stream \
        --with-stream_ssl_module \
        --with-pcre-jit \
        --with-zlib=/usr/src/zlib-${ZLIB_VERSION} \
        --with-pcre=/usr/src/pcre2-${PCRE2_VERSION} \
        --with-openssl=/usr/src/openssl-${OPENSSL_VERSION} \
        --with-cc-opt="-O2" \
        --with-ld-opt="-static" && \
    make

# --- 手动创建安装目录并复制文件，这是最可靠的方式 ---
RUN mkdir -p /tmp/install/usr/sbin && \
    cp objs/nginx /tmp/install/usr/sbin/nginx && \
    mkdir -p /tmp/install/etc/nginx/html && \
    cp conf/nginx.conf /tmp/install/etc/nginx/nginx.conf && \
    cp conf/mime.types /tmp/install/etc/nginx/mime.types && \
    cp html/index.html /tmp/install/etc/nginx/html/index.html && \
    cp html/50x.html /tmp/install/etc/nginx/html/50x.html && \
    echo "nginx:x:101:101:nginx:/var/cache/nginx:/sbin/nologin" > /tmp/install/etc/passwd && \
    echo "nginx:x:101:" > /tmp/install/etc/group && \
    mkdir -p /tmp/install/var/cache/nginx && \
    mkdir -p /tmp/install/var/run && \
    chown -R 101:101 /tmp/install/var/cache/nginx && \
    chown -R 101:101 /tmp/install/var/run

# --- 修改配置文件 ---
# 注意：我们不再需要插入 'daemon off;'，因为这将通过 CMD 参数提供
RUN sed -i \
        -e 's/worker_processes  1;/worker_processes  auto;/' \
        -e 's|access_log  logs/access.log;|access_log /dev/stdout;|g' \
        -e 's|error_log  logs/error.log;|error_log /dev/stderr;|g' \
        -e 's|root   html;|root   /etc/nginx/html;|g' \
    /tmp/install/etc/nginx/nginx.conf


# =================================================================
#  第二阶段：最终镜像 (Final Image)
#  基于 scratch，只包含必要的文件
# =================================================================
FROM scratch

# 复制在构建器中准备好的所有文件
COPY --from=builder /tmp/install/ /

# COPY --from=build /etc/passwd /etc/group /etc/

# 切换到非特权用户
USER nginx

# 暴露端口
EXPOSE 80 443

# (最佳实践) 为 Nginx 设置优雅关闭的信号
STOPSIGNAL SIGQUIT

# (最佳实践) 使用 ENTRYPOINT 定义主命令，CMD 定义默认参数
# -g 'daemon off;' 指令让 Nginx 在前台运行，这是容器化的标准做法
ENTRYPOINT ["/usr/sbin/nginx"]
CMD ["-g", "daemon off;"]
