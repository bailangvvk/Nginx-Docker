# =================================================================
#  第一阶段：构建环境 (Builder)
#  使用单个 RUN 指令动态获取版本、编译并准备所有文件
# =================================================================
FROM alpine:3.20 AS builder

# 安装所有必需的依赖
RUN apk add --no-cache \
    build-base \
    wget \
    perl \
    linux-headers \
    curl

# --- 单一、原子性的构建指令 ---
# 将所有操作合并，确保环境变量在整个过程中有效，并利用 set -eux 保证健壮性
RUN set -eux && \
    # --- 1. 动态获取最新版本号 ---
    echo "🔎 正在获取各个组件的最新稳定版本..." && \
    NGINX_VERSION=$(curl -s https://nginx.org/en/download.html | grep -oP 'nginx-[0-9]+\.[0-9]+\.[0-9]+' | sed 's/nginx-//' | head -n 1) && \
    OPENSSL_VERSION=$(curl -s https://www.openssl.org/source/ | grep -A 2 'Latest Stable' | grep -oP 'openssl-\K[3]+\.[0-9]+\.[0-9]+' | head -n 1) && \
    ZLIB_VERSION=$(curl -s https://zlib.net/ | grep -oP 'zlib-\K[0-9]+\.[0-9]+(\.[0-9]+)?(?=\.tar\.gz)' | head -n 1) && \
    PCRE2_VERSION=$(curl -sI https://github.com/PCRE2Project/pcre2/releases/latest | grep -i location | awk -F'/' '{print $NF}' | sed 's/pcre2-//') && \
    echo "✅ 版本获取完成:" && \
    echo "  - Nginx:   ${NGINX_VERSION}" && \
    echo "  - OpenSSL: ${OPENSSL_VERSION}" && \
    echo "  - zlib:    ${ZLIB_VERSION}" && \
    echo "  - PCRE2:   ${PCRE2_VERSION}" && \
    \
    # --- 2. 切换工作目录并编译所有依赖 ---
    cd /usr/src && \
    \
    echo "Downloading and compiling zlib ${ZLIB_VERSION}..." && \
    wget --no-check-certificate http://zlib.net/zlib-${ZLIB_VERSION}.tar.gz && tar -zxvf zlib-${ZLIB_VERSION}.tar.gz && cd zlib-${ZLIB_VERSION} && ./configure --static && make && cd .. && \
    \
    echo "Downloading and compiling pcre2 ${PCRE2_VERSION}..." && \
    wget --no-check-certificate https://github.com/PCRE2Project/pcre2/releases/download/pcre2-${PCRE2_VERSION}/pcre2-${PCRE2_VERSION}.tar.gz && tar -zxf pcre2-${PCRE2_VERSION}.tar.gz && cd pcre2-${PCRE2_VERSION} && ./configure --disable-shared --enable-static && make && cd .. && \
    \
    echo "Downloading and compiling openssl ${OPENSSL_VERSION}..." && \
    wget --no-check-certificate https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz && tar -zxvf openssl-${OPENSSL_VERSION}.tar.gz && cd openssl-${OPENSSL_VERSION} && ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl no-shared no-threads && make && make install_sw && cd .. && \
    \
    # --- 3. 编译 Nginx ---
    echo "Downloading and compiling nginx ${NGINX_VERSION}..." && \
    wget --no-check-certificate http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && \
    tar -zxvf nginx-${NGINX_VERSION}.tar.gz && \
    cd nginx-${NGINX_VERSION} && \
    ./configure \
        --prefix=/etc/nginx \
        --sbin-path=/usr/sbin/nginx \
        --conf-path=/etc/nginx/nginx.conf \
        --pid-path=/var/run/nginx.pid \
        --lock-path=/var/run/nginx.lock \
        --user=nginx \
        --group=nginx \
        --http-client-body-temp-path=/var/cache/nginx/client_temp \
        --http-proxy-temp-path=/var/cache/nginx/proxy_temp \
        --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp \
        --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp \
        --http-scgi-temp-path=/var/cache/nginx/scgi_temp \
        --with-http_ssl_module \
        --with-http_v2_module \
        --with-stream \
        --with-stream_ssl_module \
        --with-pcre-jit \
        --with-zlib=/usr/src/zlib-${ZLIB_VERSION} \
        --with-pcre=/usr/src/pcre2-${PCRE2_VERSION} \
        --with-openssl=/usr/src/openssl-${OPENSSL_VERSION} \
        --with-cc-opt="-O2" \
        --with-ld-opt="-static" && \
    make && \
    \
    # --- 4. 创建安装目录并复制所有文件 ---
    mkdir -p /tmp/install/usr/sbin && \
    cp objs/nginx /tmp/install/usr/sbin/nginx && \
    mkdir -p /tmp/install/etc/nginx/html && \
    cp conf/nginx.conf /tmp/install/etc/nginx/nginx.conf && \
    cp conf/mime.types /tmp/install/etc/nginx/mime.types && \
    cp html/index.html /tmp/install/etc/nginx/html/index.html && \
    cp html/50x.html /tmp/install/etc/nginx/html/50x.html && \
    echo "nginx:x:101:101:nginx:/var/cache/nginx:/sbin/nologin" > /tmp/install/etc/passwd && \
    echo "nginx:x:101:" > /tmp/install/etc/group && \
    mkdir -p /tmp/install/var/cache/nginx && \
    mkdir -p /tmp/install/var/run && \
    chown -R 101:101 /tmp/install/var/cache/nginx && \
    chown -R 101:101 /tmp/install/var/run && \
    \
    # --- 5. 创建日志符号链接 ---
    mkdir -p /tmp/install/etc/nginx/logs && \
    ln -sf /dev/stdout /tmp/install/etc/nginx/logs/access.log && \
    ln -sf /dev/stderr /tmp/install/etc/nginx/logs/error.log && \
    \
    # --- 6. 修改配置文件 ---
    sed -i \
        -e 's/worker_processes  1;/worker_processes  auto;/' \
        -e 's|root   html;|root   /etc/nginx/html;|g' \
    /tmp/install/etc/nginx/nginx.conf


# =================================================================
#  第二阶段：最终镜像 (Final Image)
#  基于 scratch，只包含必要的文件
# =================================================================
FROM scratch

# 复制在构建器中准备好的所有文件
COPY --from=builder /tmp/install/ /

# 切换到非特权用户
USER nginx

# 暴露端口
EXPOSE 80 443

# (最佳实践) 为 Nginx 设置优雅关闭的信号
STOPSIGNAL SIGQUIT

# (最佳实践) 使用 ENTRYPOINT 定义主命令，CMD 定义默认参数
ENTRYPOINT ["/usr/sbin/nginx"]
CMD ["-g", "daemon off;"]
