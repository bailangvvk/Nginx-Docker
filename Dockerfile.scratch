# 第一阶段：构建环境，编译所有依赖和 Nginx
FROM alpine:3.20 AS builder

# 安装编译所有组件所需的依赖
RUN apk add --no-cache \
    build-base \
    wget \
    perl-dev \
    linux-headers

# 定义所有组件的版本，方便统一管理和更新
ARG NGINX_VERSION
ARG OPENSSL_VERSION=3.3.1
ARG PCRE_VERSION=8.45
ARG ZLIB_VERSION=1.3.1

WORKDIR /usr/src

# 1. 编译 zlib
RUN wget http://zlib.net/zlib-${ZLIB_VERSION}.tar.gz && \
    tar -zxvf zlib-${ZLIB_VERSION}.tar.gz
WORKDIR /usr/src/zlib-${ZLIB_VERSION}
RUN ./configure --static && make

# 2. 编译 pcre
WORKDIR /usr/src
RUN wget https://sourceforge.net/projects/pcre/files/pcre/${PCRE_VERSION}/pcre-${PCRE_VERSION}.tar.gz && \
    tar -zxvf pcre-${PCRE_VERSION}.tar.gz
WORKDIR /usr/src/pcre-${PCRE_VERSION}
RUN ./configure --disable-shared --enable-static && make

# 3. 编译 openssl
WORKDIR /usr/src
RUN wget https://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz && \
    tar -zxvf openssl-${OPENSSL_VERSION}.tar.gz
WORKDIR /usr/src/openssl-${OPENSSL_VERSION}
# no-shared 选项告诉 OpenSSL 不要编译动态库
RUN ./config --prefix=/usr/local/ssl --openssldir=/usr/local/ssl no-shared no-threads && make && make install_sw

# 4. 编译 Nginx 并静态链接所有依赖
WORKDIR /usr/src
RUN wget http://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz && \
    tar -zxvf nginx-${NGINX_VERSION}.tar.gz
WORKDIR /usr/src/nginx-${NGINX_VERSION}
# 关键步骤：通过 --with-ld-opt="-static" 启用完全静态链接
# 并通过 --with-xxx= 指向我们刚刚编译好的依赖的源码目录
RUN ./configure \
        --prefix=/etc/nginx \
        --sbin-path=/usr/sbin/nginx \
        --conf-path=/etc/nginx/nginx.conf \
        --error-log-path=/var/log/nginx/error.log \
        --http-log-path=/var/log/nginx/access.log \
        --pid-path=/var/run/nginx.pid \
        --lock-path=/var/run/nginx.lock \
        --user=nginx \
        --group=nginx \
        --with-http_ssl_module \
        --with-http_v2_module \
        --with-stream \
        --with-stream_ssl_module \
        --with-pcre=/usr/src/pcre-${PCRE_VERSION} \
        --with-zlib=/usr/src/zlib-${ZLIB_VERSION} \
        --with-openssl=/usr/src/openssl-${OPENSSL_VERSION} \
        --with-cc-opt="-O2" \
        --with-ld-opt="-static" && \
    make && \
    make install

# 第二阶段：最终镜像 (基于 scratch)
FROM scratch

# 从构建环境中复制静态编译的 Nginx 二进制文件
COPY --from=builder /usr/sbin/nginx /usr/sbin/nginx

# 复制 Nginx 默认配置文件
COPY --from=builder /etc/nginx /etc/nginx

# 在 scratch 镜像中没有 useradd/groupadd 命令，需要手动创建 passwd 和 group 文件
# 创建一个非特权用户 nginx (UID 101) 和组 nginx (GID 101)
RUN echo "nginx:x:101:101:nginx:/nonexistent:/bin/false" > /etc/passwd && \
    echo "nginx:x:101:" > /etc/group

# 创建 Nginx 所需的临时目录和日志文件
# 注意：在 scratch 中无法预先创建目录，但 Nginx 启动时会尝试创建。
# 更好的做法是在配置文件中指定一个可写路径，或者在容器启动时挂载卷。
# 这里我们先复制一个空的目录结构。
COPY --from=builder /var/log/nginx /var/log/nginx
COPY --from=builder /var/cache/nginx /var/cache/nginx

# 设置目录权限。由于没有 chown，我们在构建阶段就准备好。
# (实际上，在 scratch 中无法 chown，权限依赖于 COPY 时的元数据)
# Nginx 主进程以 root 启动创建 socket，工作进程会切换到 nginx 用户。

# 切换到非特权用户
USER nginx

# 暴露端口
EXPOSE 80 443

# 启动 Nginx
CMD ["/usr/sbin/nginx", "-g", "daemon off;"]
