name: Nginx For scratch

on:
  # schedule:
  #   - cron: '0 3 * * 0'

  push:
    branches:
      - 'main'
  workflow_dispatch:

env:
  DOCKER_REPO: bailangvvking/nginx

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Fetch latest Nginx version (using curl)
        id: lastversion # 我们保持 ID 不变，下游步骤无需修改
        run: |
          # 直接调用 GitHub API 获取 nginx/nginx 仓库的最新 "release" 信息
          # -sL: 静默模式并跟随重定向
          # jq -r '.tag_name': 解析返回的 JSON，并以原始文本形式提取 tag_name 字段的值
          # 对于 Nginx，标签通常是 "release-1.27.0" 这样的格式，我们用 cut 来提取版本号
          LATEST_TAG=$(curl -sL https://api.github.com/repos/nginx/nginx/releases/latest | jq -r '.tag_name')
          
          # 从 "release-1.27.0" 中提取 "1.27.0"
          LATEST_VERSION=$(echo $LATEST_TAG | cut -d '-' -f 2)
 
          echo "Found latest Nginx tag: $LATEST_TAG"
          echo "Extracted version: $LATEST_VERSION"
 
          # 将版本号设置为此步骤的输出，以便后续步骤使用
          # 这完美模拟了原 Action 的行为
          echo "version=$LATEST_VERSION" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD  }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.scratch
          # platforms: linux/amd64,linux/arm64
          platforms: linux/amd64
          push: true
          # 建议使用新的标签，如 -static 或 -scratch
          tags: |
            ${{ env.DOCKER_REPO }}:${{ steps.lastversion.outputs.last_version }}
            # ${{ env.DOCKER_REPO }}:latest
          build-args: |
            NGINX_VERSION=${{ steps.lastversion.outputs.last_version }}
